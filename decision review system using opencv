#Third umpire decision review system 
import tkinter
import cv2
import PIL.Image , PIL.ImageTk
from functools import partial #for command because command doesn't take any arguement using partial we can give arg 
import threading #to stop blocking of program
import imutils
import time

stream = cv2.VideoCapture("clip.mp4") #to capture video
flag=True
def play(speed):
    global flag
    print(f"You clicked on play.Speed is {speed}")

    #to play video according to speed
    frame1 = stream.get(cv2.CAP_PROP_POS_FRAMES)
    stream.set(cv2.CAP_PROP_POS_FRAMES,frame1 + speed)

    grabbed, frame = stream.read()
    if not grabbed:
        exit()
    frame = imutils.resize(frame, width=SET_WIDTH, height=SET_HEIGHT)
    frame = PIL.ImageTk.PhotoImage(image=PIL.Image.fromarray(frame))
    canvas.image = frame
    canvas.create_image(0,0, image=frame, anchor=tkinter.NW)
    if flag: #to blink decision pending text
        canvas.create_text(134,26,fill="black",font = "Times 26 bold",text = "Decision Pending ")
    flag = not flag

def pending(decision):
    #1 display decision pending image
    frame = cv2.cvtColor(cv2.imread("decision1.jpeg"), cv2.COLOR_BGR2RGB)
    frame = imutils.resize(frame, width=SET_WIDTH, height=SET_HEIGHT)
    frame = PIL.ImageTk.PhotoImage(image=PIL.Image.fromarray(frame))
    canvas.image = frame
    canvas.create_image(0,0, image=frame, anchor=tkinter.NW)
    # 2. Wait for 1 second
    time.sleep(1)

    #3 display sponsor
    frame = cv2.cvtColor(cv2.imread("sponsor1.jpeg"), cv2.COLOR_BGR2RGB)
    frame = imutils.resize(frame, width=SET_WIDTH, height=SET_HEIGHT)
    frame = PIL.ImageTk.PhotoImage(image=PIL.Image.fromarray(frame))
    canvas.image = frame
    canvas.create_image(0,0, image=frame, anchor=tkinter.NW)
  
    #4 wait for a second
    time.sleep(2)

    #5 display decision 
    if decision=='out':
        decisionImg="out1.jpeg"
    else:
        decisionImg="not_out1.jpeg"

    frame = cv2.cvtColor(cv2.imread(decisionImg), cv2.COLOR_BGR2RGB)
    frame = imutils.resize(frame, width=SET_WIDTH, height=SET_HEIGHT)
    frame = PIL.ImageTk.PhotoImage(image=PIL.Image.fromarray(frame))
    canvas.image = frame
    canvas.create_image(0,0, image=frame, anchor=tkinter.NW)
    

def Out():
    thread= threading.Thread(target=pending,args=("out",)) #,because it is a tuple
    thread.daemon= 1
    thread.start()
    print("Player is out!!")

def Notout():
    thread= threading.Thread(target=pending,args=("Not out",)) #,becauseit is a tuple
    thread.daemon= 1
    thread.start()
    print("Player is Not out!!")


#for width and height of screen according to the size of our photos
SET_WIDTH = 650
SET_HEIGHT = 368 

#tkinter gui 
window = tkinter.Tk() #for window
window.title("Bunbun's third umpire decision review system")
canvas = tkinter.Canvas(window,width = SET_WIDTH,height=  SET_HEIGHT) #for canvas

#to import welcome image
cv_img =cv2.cvtColor(cv2.imread("welcome1.jpeg"),cv2.COLOR_BGR2RGB) #with the help of opencv
photo = PIL.ImageTk.PhotoImage(image=PIL.Image.fromarray(cv_img))

#to pack image on canvas
image_on_canvas =  canvas.create_image(0,0, anchor=tkinter.NW, image= photo)
canvas.pack()

#Buttons to control 
btn = tkinter.Button(window, text = "<<Previous (fast)" , width =50 ,command = partial(play,-25) )
btn.pack()

btn = tkinter.Button(window, text = "<<Previous (slow)" , width =50 ,command = partial(play,-2) )
btn.pack()

btn = tkinter.Button(window, text = "Next (fast)>>" , width =50 ,command = partial(play,25) )
btn.pack()

btn = tkinter.Button(window, text = "Next (slow)>>" , width =50 ,command = partial(play,2))
btn.pack()

btn = tkinter.Button(window, text = "Out" , width =50 , command = Out)
btn.pack()

btn = tkinter.Button(window, text = "Not out" , width =50, command = Notout )
btn.pack()

window.mainloop()# to run
